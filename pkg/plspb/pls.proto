syntax = "proto3";

option go_package = "github.com/puppetlabs/relay-pls/pkg/plspb";

package plspb;

import "google/protobuf/timestamp.proto";

service Credential {
  // Issue creates a new token.
  //
  // If this request is authorized, a child token is created. The child token's
  // expiration may not exceed the expiration of the parent, and the child
  // token's contexts must be a subset of the parent's. When the parent token
  // is deleted, so are any children.
  rpc Issue(CredentialIssueRequest) returns (CredentialIssueResponse);

  // Refresh reissues a token with a new expiration. The returned credential
  // may or may not reuse the same identifier as the request.
  rpc Refresh(CredentialRefreshRequest) returns (CredentialRefreshResponse);

  // Revoke deletes a token and prevents it from being used again. Any children
  // of the token are also revoked.
  rpc Revoke(CredentialRevokeRequest) returns (CredentialRevokeResponse);
}

service Log {
  // Create sets up a new log stream with a given context and name.
  rpc Create(LogCreateRequest) returns (LogCreateResponse);

  // Delete removes access to an existing log stream. The log stream will no
  // longer be accessible to any client, although physical removal of data may
  // be delayed.
  rpc Delete(LogDeleteRequest) returns (LogDeleteResponse);

  // List enumerates the log stream the authenticated credential has access to.
  rpc List(LogListRequest) returns (stream LogListResponse);

  // MessageAppend adds a new message to the log stream. If the payload is
  // larger than 2MB, this RPC will return INVALID_ARGUMENT. If the service
  // needs to rate-limit this request, this RPC will return RESOURCE_EXHAUSTED
  // and additional information will be available in the QuotaFailure and
  // RetryInfo messages.
  rpc MessageAppend(LogMessageAppendRequest) returns (LogMessageAppendResponse);

  // MessageList retrieves part or all of the messages in a log stream.
  // Messages are returned in the order received by the service.
  rpc MessageList(LogMessageListRequest) returns (stream LogMessageListResponse);
}

message CredentialIssueRequest {
  // contexts is the list of allowed log storage contexts for this credential.
  repeated string contexts = 1;

  // expires_at indicates when this credential should expire.
  google.protobuf.Timestamp expires_at = 2;
}

message CredentialIssueResponse {
  // credential_id is the unique public identifier for this credential.
  string credential_id = 1;

  // contexts is the list of contexts actually granted to this token. It will
  // be a subset of the requested contexts.
  repeated string contexts = 2;

  // expires_at indicates when this credential actually expires. It will be on
  // or before the requested expiration.
  google.protobuf.Timestamp expires_at = 3;

  // token is the opaque authentication token for this credential to be passed
  // to other RPC calls.
  string token = 4;
}

message CredentialRefreshRequest {
  // credential_id is the public identifier for the credential to refresh. If
  // not provided, the credential authenticating this request will be refreshed.
  // The credential must be that of the authenticated token or one of its
  // children.
  string credential_id = 1;

  // expires_at is the desired new expiration for the given credential.
  google.protobuf.Timestamp expires_at = 2;
}

message CredentialRefreshResponse {
  // credential_id is the unique public identifier for the refreshed credential.
  string credential_id = 1;

  // expires_at is the new expiry for the credential. It will be on or before
  // the requested expiration.
  google.protobuf.Timestamp expires_at = 2;

  // token is the new opaque authentication token for this credential. Any
  // previously issued token for this credential are invalidated.
  string token = 3;
}

message CredentialRevokeRequest {
  // credential_id is the public identifier for the credential to revoke. If
  // not provided, the credential authenticating this request will be revoked.
  // The credential must be that of the authenticated token or one of its
  // children.
  string credential_id = 1;
}

message CredentialRevokeResponse {
  // credential_id is the unique public identifier of the revoked credential.
  string credential_id = 1;
}

message LogCreateRequest {
  // context for this log. It must be one of the contexts allowed for the
  // authenticated credential. If the credential only has access to one
  // context, this field is optional.
  string context = 1;

  // name is a human-readable identifier for the log stream in the provided
  // context like "stdout" or "info".
  string name = 2;
}

message LogCreateResponse {
  // log_id is the unique identifier for the newly created log stream.
  string log_id = 1;
}

message LogDeleteRequest {
  // log_id is the unique identifier for the log stream to delete.
  string log_id = 1;
}

message LogDeleteResponse {}

message LogListRequest {
  // contexts is an optional list of contexts to limit the response to. If not
  // specified, the response includes all contexts the authenticating
  // credential has access to.
  repeated string contexts = 1;
}

message LogListResponse {
  // log_id is the unique identifier for the log stream.
  string log_id = 1;

  // context for this log stream.
  string context = 2;

  // name is the human-readable identifier for this log stream.
  string name = 3;
}

message LogMessageAppendRequest {
  // log_id is the identifier for the log stream to append to.
  string log_id = 1;

  // media_type is the IANA media type for the payload. Initially, the only
  // supported media type is "application/octet-stream".
  string media_type = 2;

  // payload is the actual log data to append to the stream.
  bytes payload = 3;

  // timestamp is the time the message was originally received
  google.protobuf.Timestamp timestamp = 4;
}

message LogMessageAppendResponse {
  // log_id is the identifier for the log stream appended to.
  string log_id = 1;

  // log_message_id is an opaque identifier for the message, unique to this log
  // stream.
  string log_message_id = 2;
}

message LogMessageListRequest {
  // log_id is the identifier for the log stream to retrieve messages from.
  string log_id = 1;

  // follow indicates whether this request should stay open while new messages
  // are added to the stream. This method is opportunistic and the server may
  // cancel streaming at any time. The client may retry by issuing another list
  // request.
  bool follow = 2;

  // start_at is the offset to begin reading messages, inclusive.
  google.protobuf.Timestamp start_at = 3;

  // end_at is the offset to stop reading messages, exclusive.
  google.protobuf.Timestamp end_at = 4;
}

message LogMessageListResponse {
  // log_message_id is the stream-unique identifier for this message.
  string log_message_id = 1;

  // media_type is the IANA media type for the payload.
  string media_type = 2;

  // payload is the actual log data.
  bytes payload = 3;

  // timestamp is the time the message was originally received
  google.protobuf.Timestamp timestamp = 4;
}
